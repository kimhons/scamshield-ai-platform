[
  {
    "desc": "Resolves a package/product name to a Context7-compatible library ID and returns a list of matching libraries.\n\nYou MUST call this function before 'get-library-docs' to obtain a valid Context7-compatible library ID UNLESS the user explicitly provides a library ID in the format '/org/project' or '/org/project/version' in their query.\n\nSelection Process:\n1. Analyze the query to understand what library/package the user is looking for\n2. Return the most relevant match based on:\n- Name similarity to the query (exact matches prioritized)\n- Description relevance to the query's intent\n- Documentation coverage (prioritize libraries with higher Code Snippet counts)\n- Trust score (consider libraries with scores of 7-10 more authoritative)\n\nResponse Format:\n- Return the selected library ID in a clearly marked section\n- Provide a brief explanation for why this library was chosen\n- If multiple good matches exist, acknowledge this but proceed with the most relevant one\n- If no good matches exist, clearly state this and suggest query refinements\n\nFor ambiguous queries, request clarification before proceeding with a best-guess match.",
    "kind": "mcp",
    "name": "context7__mcp__resolve_library_id",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "libraryName": {
          "description": "Library name to search for and retrieve a Context7-compatible library ID.",
          "type": "string"
        }
      },
      "required": [
        "libraryName"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Fetches up-to-date documentation for a library. You must call 'resolve-library-id' first to obtain the exact Context7-compatible library ID required to use this tool, UNLESS the user explicitly provides a library ID in the format '/org/project' or '/org/project/version' in their query.",
    "kind": "mcp",
    "name": "context7__mcp__get_library_docs",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "context7CompatibleLibraryID": {
          "description": "Exact Context7-compatible library ID (e.g., '/mongodb/docs', '/vercel/next.js', '/supabase/supabase', '/vercel/next.js/v14.3.0-canary.87') retrieved from 'resolve-library-id' or directly from user query in the format '/org/project' or '/org/project/version'.",
          "type": "string"
        },
        "tokens": {
          "description": "Maximum number of tokens of documentation to retrieve (default: 10000). Higher values provide more context but consume more tokens.",
          "type": "number"
        },
        "topic": {
          "description": "Topic to focus documentation on (e.g., 'hooks', 'routing').",
          "type": "string"
        }
      },
      "required": [
        "context7CompatibleLibraryID"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Convert an address into geographic coordinates",
    "kind": "mcp",
    "name": "minimax_google_maps__mcp__maps_geocode",
    "parameters": {
      "properties": {
        "address": {
          "description": "The address to geocode",
          "type": "string"
        }
      },
      "required": [
        "address"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Convert coordinates into an address",
    "kind": "mcp",
    "name": "minimax_google_maps__mcp__maps_reverse_geocode",
    "parameters": {
      "properties": {
        "latitude": {
          "description": "Latitude coordinate",
          "type": "number"
        },
        "longitude": {
          "description": "Longitude coordinate",
          "type": "number"
        }
      },
      "required": [
        "latitude",
        "longitude"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Search for places using Google Places API",
    "kind": "mcp",
    "name": "minimax_google_maps__mcp__maps_search_places",
    "parameters": {
      "properties": {
        "location": {
          "description": "Optional center point for the search",
          "properties": {
            "latitude": {
              "type": "number"
            },
            "longitude": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "query": {
          "description": "Search query",
          "type": "string"
        },
        "radius": {
          "description": "Search radius in meters (max 50000)",
          "type": "number"
        }
      },
      "required": [
        "query"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Get detailed information about a specific place",
    "kind": "mcp",
    "name": "minimax_google_maps__mcp__maps_place_details",
    "parameters": {
      "properties": {
        "place_id": {
          "description": "The place ID to get details for",
          "type": "string"
        }
      },
      "required": [
        "place_id"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Calculate travel distance and time for multiple origins and destinations",
    "kind": "mcp",
    "name": "minimax_google_maps__mcp__maps_distance_matrix",
    "parameters": {
      "properties": {
        "destinations": {
          "description": "Array of destination addresses or coordinates",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mode": {
          "description": "Travel mode (driving, walking, bicycling, transit)",
          "enum": [
            "driving",
            "walking",
            "bicycling",
            "transit"
          ],
          "type": "string"
        },
        "origins": {
          "description": "Array of origin addresses or coordinates",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "origins",
        "destinations"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Get directions between two points",
    "kind": "mcp",
    "name": "minimax_google_maps__mcp__maps_directions",
    "parameters": {
      "properties": {
        "destination": {
          "description": "Ending point address or coordinates",
          "type": "string"
        },
        "mode": {
          "description": "Travel mode (driving, walking, bicycling, transit)",
          "enum": [
            "driving",
            "walking",
            "bicycling",
            "transit"
          ],
          "type": "string"
        },
        "origin": {
          "description": "Starting point address or coordinates",
          "type": "string"
        }
      },
      "required": [
        "origin",
        "destination"
      ],
      "type": "object"
    }
  }
]